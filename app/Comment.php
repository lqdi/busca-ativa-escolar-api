<?php
/**
 * busca-ativa-escolar-api
 * Comment.php
 *
 * Copyright (c) LQDI Digital
 * www.lqdi.net - 2017
 *
 * @author Aryel Tupinambá <aryel.tupinamba@lqdi.net>
 *
 * Created at: 19/01/2017, 13:32
 */

namespace BuscaAtivaEscolar;


use BuscaAtivaEscolar\Traits\Data\IndexedByUUID;
use BuscaAtivaEscolar\Traits\Data\TenantScopedModel;
use Exception;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use phpDocumentor\Reflection\Types\Integer;

class Comment extends Model {

	use SoftDeletes;
	use IndexedByUUID;
	use TenantScopedModel;

	protected $table = "comments";

	protected $fillable = [
		'tenant_id',

		'content_type',
		'content_id',

		'author_id',

		'message',
		'metadata',
	];

	protected $casts = [
		'metadata' => 'object'
	];

	// -----------------------------------------------------------------------------------------------------------------

	/**
	 * The tenant that owns this comment. May be null if the content object is not tenant-scoped.
	 * @return \Illuminate\Database\Eloquent\Relations\HasOne
	 */
	public function tenant() {
		return $this->hasOne('BuscaAtivaEscolar\Tenant', 'id', 'tenant_id');
	}

	/**
	 * The author of this comment. May be null if the comment is generated by a bot/command/etc.
	 * @return \Illuminate\Database\Eloquent\Relations\HasOne
	 */
	public function author() {
		return $this->hasOne('BuscaAtivaEscolar\User', 'id', 'author_id');
	}

	/**
	 * The content this comment is attached to. Is an instance of Eloquent's Model. May or may not be tenant-scoped.
	 * @return \Illuminate\Database\Eloquent\Relations\MorphTo
	 */
	public function content() {
		return $this->morphTo('content');
	}

	// -----------------------------------------------------------------------------------------------------------------

	/**
	 * Scope: orders by date, descending
	 * @param Builder $query
	 * @return Builder
	 */
	public function scopeOrdered($query) {
		return $query->orderBy('created_at', 'DESC');
	}

	// -----------------------------------------------------------------------------------------------------------------

	/**
	 * Posts a comment and attaches it to the specified content.
	 * @param Model $content The content to attach the method to.
	 * @param User $user The user that posted the message
	 * @param string $message The message body
	 * @return Comment
	 */
	public static function post(Model $content, User $user, string $message) {
		$comment = new Comment();
		$comment->tenant_id = $content->tenant_id ?? null;
		$comment->content_type = get_class($content);
		$comment->content_id = $content->id;
		$comment->author_id = $user->id;
		$comment->message = $message;
		$comment->save();

		return $comment;
	}

    /**
     * @param Model $content
     * @param User $user
     * @param int $id_message
     * @param string $message
     * @return Comment
     */
    public static function updateComment(User $user, string $id_message, string $message) {

        $comment = Comment::findOrFail($id_message);

        if($comment->author_id != $user->id) throw new Exception('Usuário não autorizado');

        $comment->message = $message;
        $comment->save();

        return $comment;

    }

}